[useParams]

*** 사용법 ***

1. routing 파일에서 주소 경로 세팅 (해당 주소 입력시 이동하는 컴포넌트(페이지) 설정)
import Layout from 'components/Layout';
import HomePage from 'pages/Home';
import DiaryInfo from 'pages/DiaryInfo';
import { createBrowserRouter } from 'react-router-dom';

const router = createBrowserRouter([
  {
    path: '/',
    element: <Layout />,
    children: [
      {
        path: '',
        element: <HomePage />,
      },
      {
        path: '/todo/post/:key',
        element: <DiaryInfo />,
      },
    ],
  },
]);

export default router;


2. 이동 시작하는 페이지(파일)에서 Link 태그 사용하여 특정 컴포넌트에게 Link 기능 주기
    => routing 파일에서 세팅한 경로 주소를 부여하여, 해당 요소 클릭 시 routing에서 설정한 특정 컴포넌트 페이지로 이동
import { Link } from 'react-router-dom';

function Diary() {
  const Posts = useSelector((state) => state.posts);

  console.log(Posts);
  return (
    <S.Wrapper>
      {Posts.map((posts) => {
        return (
          <StyledLink to={`/todo/post/${posts.id}`}>
            <S.Card>
              <DiaryTitle posts={posts} />
              <DiaryContents posts={posts} />
            </S.Card>
          </StyledLink>
        );
      })}
    </S.Wrapper>
  );
}
export default Diary;

const StyledLink = styled(Link)`
  text-decoration: none;
  color: black;
`;

const S = {
  Wrapper,
  Card,
};


3. useParam 함수 사용하여 이동한 페이지에서 주소에 있는 데이터 활용하여 내용물 가져오도록 세팅
import { useParams } from 'react-router-dom';

function DiaryInfo() {
  const Posts = useSelector((state) => state.posts);
  const { key } = useParams();
  const selectedPost = Posts.find((item) => item.id == key);

  return (
    <>
      <S.Wrapper>
        <DetailTitle selectedPost={selectedPost} />
        <DetailContent selectedPost={selectedPost} />
      </S.Wrapper>
    </>
  );
}

export default DiaryInfo;
